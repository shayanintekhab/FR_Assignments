package com.main;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

/**
 * LockedMe.com Prototype Application
 * 
 * Features:
 *  - List files (ascending)
 *  - Add a file
 *  - Delete a file
 *  - Search for a file
 *  - Navigate menus and exit
 * 
 * Java concepts used:
 *  - java.io.File for file operations
 *  - java.util.Collections.sort (via streams)
 *  - Exception handling (IOException)
 *  - Scanner for console I/O
 */
public class LockedMeApp {
    // Change this path to your desired root directory
    private static final String ROOT_DIR = "./root";

    private Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        LockedMeApp app = new LockedMeApp();
        app.showWelcomeScreen();
        app.mainMenu();
    }

    // Display welcome screen and developer info
    private void showWelcomeScreen() {
        System.out.println("========================================");
        System.out.println("       Welcome to LockedMe.com          ");
        System.out.println("       Developer: Your Name Here        ");
        System.out.println("========================================");
        System.out.println("This prototype lets you manage files in: " + ROOT_DIR);
        System.out.println();
    }

    // Main menu loop
    private void mainMenu() {
        while (true) {
            System.out.println("Main Menu:");
            System.out.println("1. List all files (ascending)");
            System.out.println("2. Business Operations");
            System.out.println("3. Exit");
            System.out.print("Select an option (1–3): ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    listAllFiles();
                    break;
                case "2":
                    businessOperationsMenu();
                    break;
                case "3":
                    System.out.println("Exiting application. Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice. Please enter 1, 2 or 3.");
            }
        }
    }

    // List all files in ascending order
    private void listAllFiles() {
        File dir = new File(ROOT_DIR);
        if (!dir.exists() || !dir.isDirectory()) {
            System.out.println("Root directory not found or is not a folder.");
            return;
        }

        String[] files = dir.list();
        if (files == null || files.length == 0) {
            System.out.println("No files or folders exist in the directory.");
            return;
        }

        // Sort ascending
        List<String> sorted = Arrays.stream(files)
                                    .sorted(String.CASE_INSENSITIVE_ORDER)
                                    .collect(Collectors.toList());

        System.out.println("Files/folders in ascending order:");
        sorted.forEach(name -> System.out.println("  " + name));
        System.out.println();
    }

    // Sub‑menu for add, delete, search
    private void businessOperationsMenu() {
        while (true) {
            System.out.println("\nBusiness Operations:");
            System.out.println("A. Add a file");
            System.out.println("B. Delete a file");
            System.out.println("C. Search for a file");
            System.out.println("D. Back to Main Menu");
            System.out.print("Select an option (A–D): ");
            String choice = scanner.nextLine().trim().toUpperCase();

            switch (choice) {
                case "A":
                    addFile();
                    break;
                case "B":
                    deleteFile();
                    break;
                case "C":
                    searchFile();
                    break;
                case "D":
                    return;  // back to main menu
                default:
                    System.out.println("Invalid choice. Please enter A, B, C or D.");
            }
        }
    }

    // Add a new file
    private void addFile() {
        System.out.print("Enter filename to add (no extension filtering): ");
        String filename = scanner.nextLine().trim();
        File newFile = new File(ROOT_DIR, filename);

        try {
            if (newFile.exists()) {
                System.out.println("File already exists!");
            } else if (newFile.createNewFile()) {
                System.out.println("File '" + filename + "' created successfully.");
            } else {
                System.out.println("Failed to create file. Check permissions.");
            }
        } catch (IOException e) {
            System.out.println("An error occurred while creating the file: " + e.getMessage());
        }
    }

    // Delete an existing file (case‑sensitive)
    private void deleteFile() {
        System.out.print("Enter exact filename to delete: ");
        String filename = scanner.nextLine().trim();
        File file = new File(ROOT_DIR, filename);

        if (!file.exists()) {
            System.out.println("File not found: " + filename);
            return;
        }
        if (file.delete()) {
            System.out.println("File '" + filename + "' deleted successfully.");
        } else {
            System.out.println("Could not delete file. Check permissions or if it's open.");
        }
    }

    // Search for a file (case‑sensitive)
    private void searchFile() {
        System.out.print("Enter filename to search: ");
        String filename = scanner.nextLine().trim();
        File dir = new File(ROOT_DIR);
        File[] matches = dir.listFiles((d, name) -> name.equals(filename));

        if (matches != null && matches.length > 0) {
            System.out.println("File found: " + matches[0].getAbsolutePath());
        } else {
            System.out.println("File not found: " + filename);
        }
    }
}

